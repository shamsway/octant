---
- name: Install Nomad
  ansible.builtin.include_role:
    name: install-hashi
  vars:
    name: nomad

- name: Enable Nomad user lingering
  ansible.builtin.command: loginctl enable-linger {{user}}

- name: Add subids to system files
  ansible.builtin.lineinfile:
    dest: /etc/{{ item }}
    regexp: ^{{ user }}:(\d+):(\d+)$
    line: "{{ user }}:100000:65536"
    create: true
    state: present
  with_items:
    - subuid
    - subgid

- name: Set net.ipv4.ip_unprivileged_port_start sysctl value
  ansible.posix.sysctl:
    name: net.ipv4.ip_unprivileged_port_start
    value: "80"
    state: present
    sysctl_set: true
    reload: true

- name: Create user_priv_ports.conf file
  ansible.builtin.copy:
    content: |
      net.ipv4.ip_unprivileged_port_start=80
    dest: /etc/sysctl.d/user_priv_ports.conf
    owner: root
    group: root
    mode: "0644"

- name: Copy podman service files for socket activation
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /usr/lib/systemd/user/
  with_items:
    - podman.service
    - podman.socket

- name: Register systemd socket activation for podman
  become: true
  become_user: "{{ user }}"
  become_method: machinectl
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: restarted
    scope: user
  with_items:
    - podman.socket
    - podman.service
  vars:
    ansible_ssh_pipelining: false
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ uid }}
    DBUS_SESSION_BUS_ADDRESS: unix:path=/run/user/{{ uid }}/bus

- name: Reload systemd daemon
  become: true
  ansible.builtin.systemd:
    daemon_reload: true

- name: Create podman userspace config
  ansible.builtin.file:
    path: ~/.config/containers
    state: directory
  become: true
  become_user: "{{user}}"

- name: Copy podman containers.conf
  become: true
  become_user: "{{user}}"
  ansible.builtin.copy:
    src: containers.conf
    dest: ~/.config/containers

- name: Copy docker.io auth
  become: true
  become_user: "{{user}}"
  ansible.builtin.copy:
    src: auth.json
    dest: /run/user/{{ uid }}/containers/

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
  register: tmpdir

- name: Download Nomad Podman driver
  ansible.builtin.get_url:
    url: https://releases.hashicorp.com/nomad-driver-podman/0.5.2/nomad-driver-podman_0.5.2_linux_amd64.zip
    dest: "{{ tmpdir.path }}/nomad-driver-podman_0.5.2_linux_amd64.zip"
    mode: "0644"

- name: Unzip Nomad Podman driver
  ansible.builtin.unarchive:
    src: "{{ tmpdir.path }}/nomad-driver-podman_0.5.2_linux_amd64.zip"
    dest: "{{ tmpdir.path }}"
    mode: "0755"
    remote_src: true

- name: Ensure plugins directory exists and has proper ownership
  ansible.builtin.file:
    path: "{{ datadirs.nomad | default(datadir) }}//nomad/plugins"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"
    follow: false

- name: Copy driver to nomad plugins dir
  ansible.builtin.copy:
    src: "{{ tmpdir.path }}/nomad-driver-podman"
    dest: "{{ datadirs.nomad | default(datadir) }}/nomad/plugins"
    remote_src: true
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: "0755"

- name: Remove temp folder
  ansible.builtin.file:
    path: "{{ tmpdir.path }}"
    state: absent
  when: tmpdir.path is defined

- name: Restart Nomad nodes one at a time
  ansible.builtin.include_tasks: restart-node.yml
  loop: "{{ groups['servers'] }}"