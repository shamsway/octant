job "restic-backup" {
  region = "${region}"
  datacenters = ["${datacenter}"]
  type        = "batch"

  periodic {
    cron             = "0 2 * * *"
    prohibit_overlap = true
  }

  group "backup" {
    %{ for volume in jsondecode(backup_volumes) ~}
    volume "${volume.name}" {
        type      = "host"
        read_only = true
        source    = "${volume.name}"
    }
    %{ endfor ~}

    task "restic" {
      driver = "podman"

      template {
        destination = "$${NOMAD_SECRETS_DIR}/env.txt"
        env         = true
        data        = <<EOT
RESTIC_PASSWORD={{ with nomadVar "nomad/jobs/restic-backup" }}{{ .restic_password }}{{ end }}
EOT
      }

      template {
        data = <<EOH
#!/bin/bash

# Run the Restic backup command
restic_output=$(restic backup \
  --repo "${restic_repository}" \
  %{ for volume in jsondecode(backup_volumes) ~}
  "/${volume.name}" \
  %{ endfor ~}
  2>&1)

# Get the backup result and timestamp
backup_result=$?
backup_timestamp=$(date +"%Y-%m-%d %H:%M:%S")

# Set the result value based on the exit code
if [ $backup_result -eq 0 ]; then
  result_value="SUCCESSFUL"
else
  result_value="FAILED"
fi

# Create a JSON object with the backup result and timestamp
json_data=$(cat <<EOF
{
  "result": "$result_value",
  "timestamp": "$backup_timestamp"
}
EOF
)

# Store the JSON data in Consul's KV store
curl -X PUT -d "$json_data" -H "Content-Type: application/json" "http://consul.service.consul:8500/v1/kv/restic/backup/nomad/results"

# Print the Restic output
echo "$json_data"
echo "$restic_output"
EOH

        destination = "local/backup.sh"
        change_mode = "noop"
        perms = "755"
      }

      config {
        image = "${image}"
        hostname = "octant-backup"
        entrypoint = ["sh", "-c", "local/backup.sh"]
        logging = {
          driver = "journald"
          options = [
            {
              "tag" = "restic"
            }
          ]
        } 
      }
      
      %{ for volume in jsondecode(backup_volumes) ~}
      volume_mount {
        volume      = "${volume.name}"
        destination = "/${volume.name}"
        read_only   = true
      }
      %{ endfor ~}
    }
  }
}