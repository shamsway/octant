job "{{ job.name }}" {
  datacenters = ["shamsway"]
  type        = "service"

  # Adjust as needed for rootless/root containers
  constraint {
    attribute = "${meta.rootless}"
    value = "true"
  }

  # Temporary until lab is fully on physical hardware
  affinity {
    attribute = "${meta.class}"
    value     = "physical"
    weight    = 100
  }

  group "{{ job.name }}" {
    network {
      port "{{ job.portname}}" {
        static = {{ job.ports[0].split(':')[1] }}
      }
      dns {
        servers = ["192.168.252.1","192.168.252.6","192.168.252.7"]
      }      
    }

    volume "{{ job.name }}-mount" {
      type      = "host"
      read_only = false
      source    = "{{ job.name }}-mount"
    }

    {% for service in services %}
    service {
      name = "{{ service.name }}"
      provider = "consul"
      port = "http"
      tags = [
        "traefik.enable=true",
        "traefik.consulcatalog.connect=false",          
        "traefik.http.routers.{{ job.name }}.rule=Host(`{{ job.name }}.shamsway.net`)",
        "traefik.http.routers.{{ job.name }}.entrypoints=web,websecure",
        "traefik.http.routers.{{ job.name }}.tls.certresolver=cloudflare",
        "traefik.http.routers.{{ job.name }}.middlewares=redirect-web-to-websecure@internal",
      ]

      connect {
        native = true
      }
              
      check {
        name     = "alive"
        type     = "http"
        path     = "/"
        interval = "10s"
        timeout  = "2s"
      }
    }
    {% endfor %}

    task "{{ job.name }}" {
      driver = "podman"

      config {
        image = "{{ job.image }}"
        ports = ["http"]
        logging = {
          driver = "journald"
          options = [
            {
              "tag" = "{{ job.name }}"
            }
          ]
        }         
      }

      volume_mount {
        volume      = "{{ job.name }}-mount"
        destination = "/path/to/mount"
        read_only   = false
      }

      env {
        {% for env in job.environment %}
        {{ env.split('=')[0] }} = "{{ env.split('=')[1] }}"
        {% endfor %}
      }

      resources {
        cpu    = 500
        memory = 256
      }
    }
  }
}